export class TelegramService {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ HTTPS-–∞–¥—Ä–µ—Å –¥–ª—è –±–æ–ª—å—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
        this.apiUrl = 'https://217.144.186.159:8080/webhook';
        this.backupApiUrl = 'http://217.144.186.159:8080/webhook'; // –ë—ç–∫–∞–ø URL –¥–ª—è HTTP
        this.callbacks = new Map();
        this.maxRetries = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        this.currentApiUrl = this.apiUrl; // –ê–∫—Ç–∏–≤–Ω—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        this.connectionTested = false;
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.defaultParams = {
            telegram_id: "819793181",  // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            date: "20.08.2005"         // –î–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        };
    }

    init() {
        if (!this.tg) {
            // –í –±—Ä–∞—É–∑–µ—Ä–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            console.log("üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞");
            return;
        }

        this.tg.expand();
        this.tg.ready();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Ç–æ–ª—å–∫–æ –≤ WebApp
        if (this.isTelegramWebApp()) {
            if (this.tg.initDataUnsafe?.user) {
                console.log("‚úÖ Web App –æ—Ç–∫—Ä—ã—Ç –≤ Telegram");
                console.log("üë§ User ID:", this.tg.initDataUnsafe.user.id);
            } else {
                console.warn("‚ö† Telegram –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }

            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è WebApp
            console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:");
            console.log("Platform:", this.tg.platform);
            console.log("Version:", this.tg.version);
            console.log("InitData:", this.tg.initData);
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        this.testServerConnection();
    }

    isTelegramWebApp() {
        return Boolean(
            this.tg?.initDataUnsafe?.user?.id &&
            this.tg?.initData &&
            this.tg?.platform !== 'unknown' &&
            this.tg?.version
        );
    }
    
    async testServerConnection() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º GET –≤–º–µ—Å—Ç–æ HEAD –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            console.log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞...");
            const response = await fetch(this.apiUrl, {
                method: 'GET', // HEAD –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
                mode: 'cors', // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º CORS
                cache: 'no-cache',
                // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                signal: AbortSignal.timeout(5000)
            });
            
            if (response.ok) {
                console.log("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω");
                this.currentApiUrl = this.apiUrl;
                this.connectionTested = true;
                return true;
            } else {
                console.log("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å:", response.status);
                throw new Error(`HTTP error! status: ${response.status}`);
            }
        } catch (error) {
            console.log("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π URL");
            
            try {
                // –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π HTTP URL —Å GET
                console.log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∞—Å–Ω–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞...");
                const backupResponse = await fetch(this.backupApiUrl, {
                    method: 'GET',
                    mode: 'cors',
                    cache: 'no-cache',
                    signal: AbortSignal.timeout(5000)
                });
                
                if (backupResponse.ok) {
                    console.log("‚úÖ –ó–∞–ø–∞—Å–Ω–æ–π API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω");
                    this.currentApiUrl = this.backupApiUrl;
                    this.connectionTested = true;
                    return true;
                } else {
                    console.log("‚ö†Ô∏è –ó–∞–ø–∞—Å–Ω–æ–π API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å:", backupResponse.status);
                    throw new Error(`HTTP error! status: ${backupResponse.status}`);
                }
            } catch (backupError) {
                console.error("‚ùå –í—Å–µ API —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:", backupError.message || backupError);
                
                // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∂–∏–º–æ–º no-cors
                console.log("‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º —Ä–µ–∂–∏–º no-cors –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...");
                try {
                    await fetch(this.backupApiUrl, {
                        method: 'GET',
                        mode: 'no-cors', // –≠—Ç–æ—Ç —Ä–µ–∂–∏–º –Ω–µ –¥–∞—Å—Ç —á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                        cache: 'no-cache',
                        signal: AbortSignal.timeout(5000)
                    });
                    
                    // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
                    console.log("‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è CORS");
                    this.currentApiUrl = this.backupApiUrl;
                    return false;
                } catch (noCorsError) {
                    console.error("‚ùå –°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", noCorsError.message || noCorsError);
                    return false;
                }
            }
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async sendUserData(birthdate, retryCount = 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º
        const isWebApp = this.isTelegramWebApp();
        let userId = this.defaultParams.telegram_id; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –ï—Å–ª–∏ –º—ã –≤ WebApp, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (isWebApp && this.tg?.initDataUnsafe?.user?.id) {
            userId = this.tg.initDataUnsafe.user.id.toString();
        }
        
        // –ï—Å–ª–∏ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        if (!isWebApp) {
            console.log("üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞: –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
            return { 
                success: true, 
                browserMode: true,
                message: "Browser mode, no data sent"
            };
        }
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π URL –∏–ª–∏ –∑–∞–ø–∞—Å–Ω–æ–π, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            const url = this.currentApiUrl || this.backupApiUrl;
            
            console.log("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", url);
            console.log("üìä –î–∞–Ω–Ω—ã–µ:", { telegram_id: userId, date: birthdate });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å, —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º no-cors, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å CORS
            const response = await fetch(url, {
                method: 'POST',
                mode: 'cors', // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å CORS
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json',
                    // –î–æ–±–∞–≤–ª—è–µ–º Origin –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ CORS
                    'Origin': window.location.origin
                },
                body: JSON.stringify({
                    telegram_id: userId,
                    date: birthdate
                }),
                signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            }).catch(async (corsError) => {
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É CORS, –ø—Ä–æ–±—É–µ–º —Å —Ä–µ–∂–∏–º–æ–º no-cors —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                console.log("‚ö†Ô∏è CORS –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", corsError.message);
                return await this.sendDefaultRequest(birthdate);
            });

            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
            if (response && response.ok) {
                try {
                    const result = await response.json();
                    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", result);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram WebApp
                    if (this.tg?.sendData) {
                        this.tg.sendData(JSON.stringify({
                            type: "register",
                            status: "success",
                            data: result
                        }));
                    }

                    return { success: true, data: result };
                } catch (jsonError) {
                    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –Ω–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
                    console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON, –Ω–æ —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–µ–Ω");
                    
                    if (this.tg?.sendData) {
                        this.tg.sendData(JSON.stringify({
                            type: "register",
                            status: "success",
                            data: { message: "Data sent successfully" }
                        }));
                    }

                    return { success: true, data: { message: "Data sent successfully" } };
                }
            } else if (response) {
                throw new Error(`HTTP error! status: ${response.status}`);
            } else {
                throw new Error("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω");
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error.message || error);
            
            // –ï—Å–ª–∏ –º—ã –µ—â–µ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
            if (retryCount < this.maxRetries) {
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${this.maxRetries}...`);
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                this.currentApiUrl = this.currentApiUrl === this.apiUrl ? this.backupApiUrl : this.apiUrl;
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                await new Promise(resolve => setTimeout(resolve, 1000));
                return this.sendUserData(birthdate, retryCount + 1);
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (userId !== this.defaultParams.telegram_id) {
                console.log("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞");
                return this.sendDefaultRequest(birthdate);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ Telegram WebApp
            if (this.tg?.sendData) {
                this.tg.sendData(JSON.stringify({
                    type: "register",
                    status: "error",
                    error: error.message
                }));
            }

            return { 
                success: false, 
                error: error.message 
            };
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    async sendDefaultRequest(birthdate) {
        try {
            console.log("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
            console.log(`üìä curl -X POST ${this.backupApiUrl} -H "Content-Type: application/json" -d '{"telegram_id": "${this.defaultParams.telegram_id}", "date": "${birthdate || this.defaultParams.date}"}'`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º no-cors —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –æ–±–æ–π—Ç–∏ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            const response = await fetch(this.backupApiUrl, {
                method: 'POST',
                mode: 'no-cors', // –≠—Ç–æ –Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç —á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç, –Ω–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    telegram_id: this.defaultParams.telegram_id,
                    date: birthdate || this.defaultParams.date
                }),
                signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            });

            // –í —Ä–µ–∂–∏–º–µ no-cors –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç
            // –Ω–æ –µ—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            console.log("‚úÖ –ó–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ä–µ–∂–∏–º no-cors)");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram WebApp
            if (this.tg?.sendData) {
                this.tg.sendData(JSON.stringify({
                    type: "register",
                    status: "success",
                    note: "Used default parameters with no-cors mode"
                }));
            }

            return { 
                success: true, 
                usedDefaults: true,
                noCors: true
            };
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", error.message || error);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ Telegram WebApp
            if (this.tg?.sendData) {
                this.tg.sendData(JSON.stringify({
                    type: "register",
                    status: "error",
                    error: error.message
                }));
            }
            
            // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–º–∏—Ç–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            console.log("‚ö†Ô∏è –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞");
            
            return { 
                success: true,
                simulated: true,
                usedDefaults: true,
                error: error.message
            };
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –±–µ–∑ Telegram
    async testApiConnection(userId, birthdate) {
        try {
            // –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã curl –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            console.log(`üìã –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: curl -X POST ${this.backupApiUrl} -H "Content-Type: application/json" -d '{"telegram_id": "${userId || this.defaultParams.telegram_id}", "date": "${birthdate || this.defaultParams.date}"}'`);
            
            const response = await fetch(this.backupApiUrl, {
                method: 'POST',
                mode: 'no-cors', // –ò—Å–ø–æ–ª—å–∑—É–µ–º no-cors –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    telegram_id: userId?.toString() || this.defaultParams.telegram_id,
                    date: birthdate || this.defaultParams.date
                })
            });
            
            // –í —Ä–µ–∂–∏–º–µ no-cors –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç
            console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ä–µ–∂–∏–º no-cors)");
            
            return { 
                success: true, 
                message: "Request sent in no-cors mode. Check server logs for response.",
                testParams: {
                    telegram_id: userId?.toString() || this.defaultParams.telegram_id,
                    date: birthdate || this.defaultParams.date  
                }
            };
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error.message || error);
            return { 
                success: false, 
                error: error.message 
            };
        }
    }

    #handleError(error) {
        console.error('WebApp error:', error.message || error);
        if (this.tg?.sendData) {
            this.tg.sendData(JSON.stringify({
                type: "error",
                error: error.message || "Unknown error"
            }));
        }
    }
}
