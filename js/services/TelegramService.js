export class TelegramService {
    constructor() {
        // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ URL
        this.isLocalDevelopment = window.location.hostname === 'localhost' || 
                                 window.location.hostname === '127.0.0.1';
        
        // –í —Ä–µ–∂–∏–º–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º NGINX –ø—Ä–æ–∫—Å–∏ –Ω–∞ –ø–æ—Ä—Ç—É 8081
        if (this.isLocalDevelopment) {
            this.baseUrl = 'http://localhost:8081/api';
        } else {
            // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π URL –∫ API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            const isHttps = window.location.protocol === 'https:';
            this.baseUrl = `${isHttps ? 'https' : 'http'}://217.144.186.159:8080`;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        this.tg = window.Telegram?.WebApp;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ URL
        this.apiUrl = `${this.baseUrl}/webhook/`;
        this.healthUrl = `${this.baseUrl}/health`;
        this.dbHealthUrl = `${this.baseUrl}/health/db`;
        
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π URL –≤—Å–µ–≥–¥–∞ –ø—Ä—è–º–æ–π —á–µ—Ä–µ–∑ HTTP
        this.backupApiUrl = 'http://217.144.186.159:8080/webhook/';
        
        // –ü—Ä–æ—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        this.defaultParams = {
            telegram_id: "819793181",
            date: "20.08.2005"
        };
        
        this.timeouts = {
            health: 3000,
            data: 5000
        };
        
        console.log(`üõ†Ô∏è TelegramService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–∑–æ–≤—ã–º URL: ${this.baseUrl}`);
        if (this.isLocalDevelopment) {
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π NGINX –ø—Ä–æ–∫—Å–∏ –¥–ª—è API');
        }
    }

    init() {
        if (!this.tg) {
            console.log("üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞");
            return;
        }

        this.tg.expand();
        this.tg.ready();

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (this.tg?.initDataUnsafe?.user) {
            console.log("üë§ User ID:", this.tg.initDataUnsafe.user.id);
            console.log("üì± Platform:", this.tg.platform);
            console.log("üìä Version:", this.tg.version);
        }
    }

    isTelegramWebApp() {
        return Boolean(
            this.tg?.initDataUnsafe?.user?.id &&
            this.tg?.initData &&
            this.tg?.platform !== 'unknown'
        );
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async sendUserData(birthdate) {
        let userId = this.defaultParams.telegram_id;
        let isBrowserMode = false;
        
        // –í —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        if (!this.isTelegramWebApp()) {
            console.log("üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏");
            isBrowserMode = true;
            
            // –í —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID
            userId = this.defaultParams.telegram_id;
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            const data = {
                event_type: "birthday",
                payload: {
                    telegram_id: userId,
                    date: this.formatDateForApi(birthdate),
                    test_mode: true // –§–ª–∞–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
                }
            };
            
            console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:", data);
            
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏
                const response = await this.fetchWithTimeout(this.apiUrl, {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(data)
                }, this.timeouts.data);
                
                if (response.ok) {
                    const result = await response.json();
                    console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", result);
                    return { 
                        success: true, 
                        browserMode: true,
                        data: result
                    };
                } else {
                    console.error(`‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status}`);
                    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –¥–ª—è UI
                    return {
                        success: true,
                        browserMode: true,
                        message: "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ (API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª)"
                    };
                }
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error.message);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
                this.checkApiStatusInBackground();
                
                // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                return {
                    success: true,
                    browserMode: true,
                    message: "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ (API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
                };
            }
        }
        
        // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram WebApp –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
        userId = this.tg?.initDataUnsafe?.user?.id?.toString() || this.defaultParams.telegram_id;
        if (userId === this.defaultParams.telegram_id) {
            console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
        }
        
        const data = {
            event_type: "birthday",
            payload: {
                telegram_id: userId,
                date: this.formatDateForApi(birthdate)
            }
        };
        
        console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:", data);
        
        return await this.sendDataWithRetry(data);
    }
    
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    async sendDataWithRetry(data) {
        // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π URL
        try {
            const response = await this.fetchWithTimeout(this.apiUrl, {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(data)
            }, this.timeouts.data);
            
            if (response.ok) {
                const result = await response.json();
                console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", result);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
                if (this.tg?.sendData) {
                    this.tg.sendData(JSON.stringify({
                        type: "success",
                        data: result
                    }));
                }
                
                return { success: true, data: result };
            } else {
                const errorText = await response.text();
                throw new Error(`HTTP error: ${response.status} - ${errorText}`);
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error.message);
            
            // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π URL –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
            if (this.apiUrl !== this.backupApiUrl) {
                console.log("‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL");
                try {
                    const backupResponse = await this.fetchWithTimeout(this.backupApiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    }, this.timeouts.data);
                    
                    if (backupResponse.ok) {
                        const result = await backupResponse.json();
                        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø–∞—Å–Ω–æ–π URL:", result);
                        return { success: true, data: result };
                    } else {
                        const errorText = await backupResponse.text();
                        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∞—Å–Ω–æ–≥–æ URL: ${backupResponse.status} - ${errorText}`);
                    }
                } catch (backupError) {
                    console.error("‚ùå –ó–∞–ø–∞—Å–Ω–æ–π URL —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", backupError.message);
                }
            }
            
            // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
            return { 
                success: false, 
                error: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}`,
                userId: data.payload.telegram_id
            };
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API –≤ —Ñ–æ–Ω–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
    async checkApiStatusInBackground() {
        console.log("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...");
        setTimeout(async () => {
            try {
                console.log(`‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (${this.healthUrl})...`);
                const response = await this.fetchWithTimeout(this.healthUrl, { 
                    method: 'GET',
                    headers: { 'Accept': 'application/json' }
                }, this.timeouts.health);
                
                if (response.ok) {
                    const result = await response.json();
                    console.log("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:", result);
                } else {
                    console.error(`‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status}`);
                }
            } catch (error) {
                console.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:", error.message);
            }
        }, 100);
    }
    
    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ HEAD –∑–∞–ø—Ä–æ—Å
    async isApiReachable() {
        try {
            console.log(`‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º (${this.baseUrl})...`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch —Å HEAD –º–µ—Ç–æ–¥–æ–º - —ç—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
            const response = await fetch(this.baseUrl, { 
                method: 'HEAD',
                cache: 'no-store',
                // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º no-cors —Ä–µ–∂–∏–º –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                timeout: 3000
            });
            
            console.log(`üì° –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª: HTTP ${response.status}`);
            
            // –î–ª—è HEAD –∑–∞–ø—Ä–æ—Å–∞ –ª—é–±–æ–π –æ—Ç–≤–µ—Ç (–¥–∞–∂–µ 404) –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
            return true;
        } catch (error) {
            console.error(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
            return false;
        }
    }
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ health —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    async simpleHealthCheck() {
        try {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health API (${this.healthUrl})...`);
            
            const response = await this.fetchWithTimeout(this.healthUrl, { 
                method: 'GET',
                headers: { 'Accept': 'application/json' },
                cache: 'no-store'
            }, this.timeouts.health);
            
            if (response.ok) {
                try {
                    const data = await response.json();
                    console.log("‚úÖ Health API –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ:", data);
                    return { 
                        status: data.status === "healthy" ? "healthy" : "error", 
                        message: `API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${data.status}`,
                        data
                    };
                } catch (parseError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${parseError.message}`);
                    return { 
                        status: "error", 
                        message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API" 
                    };
                }
            } else {
                console.error(`‚ùå Health API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: HTTP ${response.status}`);
                return { 
                    status: "error", 
                    message: `–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status}` 
                };
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ health API:", error.message);
            
            // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
            try {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL: ${this.healthUrl.replace('https:', 'http:')}`);
                const backupResponse = await this.fetchWithTimeout(
                    this.healthUrl.replace('https:', 'http:'), 
                    { method: 'GET', headers: { 'Accept': 'application/json' } }, 
                    this.timeouts.health
                );
                
                if (backupResponse.ok) {
                    const backupData = await backupResponse.json();
                    console.log("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π health API –¥–æ—Å—Ç—É–ø–µ–Ω:", backupData);
                    return { 
                        status: backupData.status === "healthy" ? "healthy" : "error", 
                        message: `API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${backupData.status}`,
                        data: backupData,
                        backup: true
                    };
                } else {
                    console.error(`‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π health API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: HTTP ${backupResponse.status}`);
                }
            } catch (backupError) {
                console.error(`‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${backupError.message}`);
            }
            
            return { 
                status: "unavailable", 
                message: "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º." 
            };
        }
    }

    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ª–æ–≥–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    async checkHealthWithLogs() {
        console.log(`üå°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ health API –ø–æ –∞–¥—Ä–µ—Å—É: ${this.healthUrl}`);
        
        try {
            const startTime = Date.now();
            const response = await this.fetchWithTimeout(this.healthUrl, {
                method: 'GET',
                headers: { 'Accept': 'application/json' }
            }, 5000);
            const endTime = Date.now();
            
            if (response.ok) {
                const data = await response.json();
                const responseTime = endTime - startTime;
                console.log(`‚úÖ Health API –¥–æ—Å—Ç—É–ø–µ–Ω (${responseTime}ms): `, data);
                return { 
                    status: "healthy", 
                    message: `API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (${responseTime}ms)`,
                    data
                };
            } else {
                console.error(`‚ùå Health API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: HTTP ${response.status}`);
                const errorText = await response.text();
                console.error(`–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ${errorText}`);
                return { 
                    status: "error", 
                    message: `–û—à–∏–±–∫–∞ API: HTTP ${response.status}`,
                    error: errorText
                };
            }
        } catch (error) {
            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Health API: ${error.message}`);
            
            // –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π URL
            try {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π HTTP URL: ${this.healthUrl.replace('https:', 'http:')}`);
                const backupResponse = await this.fetchWithTimeout(
                    this.healthUrl.replace('https:', 'http:'), 
                    { method: 'GET', headers: { 'Accept': 'application/json' } }, 
                    5000
                );
                
                if (backupResponse.ok) {
                    const backupData = await backupResponse.json();
                    console.log("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π Health API –¥–æ—Å—Ç—É–ø–µ–Ω:", backupData);
                    return { 
                        status: "healthy", 
                        message: "API —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ HTTP",
                        data: backupData,
                        backup: true
                    };
                }
            } catch (backupError) {
                console.error(`‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–π URL —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${backupError.message}`);
            }
            
            return { 
                status: "unavailable", 
                message: "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º."
            };
        }
    }

    formatDateForApi(dateString) {
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
        if (/^\d{4}-\d{2}-\d{2}$/.test(dateString)) {
            return dateString;
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DD.MM.YYYY –≤ YYYY-MM-DD
        const parts = dateString.split('.');
        if (parts.length === 3) {
            return `${parts[2]}-${parts[1]}-${parts[0]}`;
        }
        
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
        return dateString;
    }

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º —á–µ—Ä–µ–∑ AbortSignal –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    async fetchWithTimeout(url, options = {}, timeout = 8000) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), timeout);
        
        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal
            });
            clearTimeout(timeoutId);
            return response;
        } catch (error) {
            clearTimeout(timeoutId);
            if (error.name === 'AbortError') {
                throw new Error(`Request to ${url} timed out after ${timeout}ms`);
            }
            throw error;
        }
    }

    // –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
    async testConnection() {
        console.log("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API...");
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        const isReachable = await this.isApiReachable();
        if (!isReachable) {
            return false;
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º health API
        const result = await this.simpleHealthCheck();
        return result.status === "healthy";
    }
    
    getCurlCommand(birthdate) {
        const userId = this.tg?.initDataUnsafe?.user?.id || this.defaultParams.telegram_id;
        const formattedDate = this.formatDateForApi(birthdate || this.defaultParams.date);
        
        return `curl -X POST ${this.apiUrl} -H "Content-Type: application/json" -d '{"event_type": "birthday", "payload": {"telegram_id": "${userId}", "date": "${formattedDate}"}}'`;
    }
}
