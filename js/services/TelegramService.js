export class TelegramService {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.apiUrl = 'https://217.144.186.159:8080/webhook';
        this.backupApiUrl = 'http://217.144.186.159:8080/webhook';
        this.defaultParams = {
            telegram_id: "819793181",
            date: "20.08.2005"
        };
    }

    init() {
        if (!this.tg) {
            console.log("üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞");
            return;
        }

        this.tg.expand();
        this.tg.ready();

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (this.tg?.initDataUnsafe?.user) {
            console.log("üë§ User ID:", this.tg.initDataUnsafe.user.id);
            console.log("üì± Platform:", this.tg.platform);
            console.log("üìä Version:", this.tg.version);
        }
    }

    isTelegramWebApp() {
        return Boolean(
            this.tg?.initDataUnsafe?.user?.id &&
            this.tg?.initData &&
            this.tg?.platform !== 'unknown'
        );
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async sendUserData(birthdate) {
        // –í –±—Ä–∞—É–∑–µ—Ä–µ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        if (!this.isTelegramWebApp()) {
            console.log("üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞: –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
            return { 
                success: true, 
                browserMode: true
            };
        }
        
        let userId = this.tg?.initDataUnsafe?.user?.id?.toString();
        
        // –ï—Å–ª–∏ –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!userId) {
            userId = this.defaultParams.telegram_id;
            console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
        }
        
        const data = {
            telegram_id: userId,
            date: birthdate
        };
        
        console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:", data);
        
        try {
            // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π URL (HTTPS)
            const response = await fetch(this.apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            
            if (response.ok) {
                const result = await response.json();
                console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", result);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
                if (this.tg?.sendData) {
                    this.tg.sendData(JSON.stringify({
                        type: "success",
                        data: result
                    }));
                }
                
                return { success: true, data: result };
            } else {
                throw new Error(`HTTP error: ${response.status}`);
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ HTTPS:", error.message);
            
            try {
                // –ï—Å–ª–∏ HTTPS –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º HTTP
                const backupResponse = await fetch(this.backupApiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                if (backupResponse.ok) {
                    const result = await backupResponse.json();
                    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ HTTP:", result);
                    return { success: true, data: result };
                } else {
                    throw new Error(`HTTP error: ${backupResponse.status}`);
                }
            } catch (backupError) {
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                const errorMessage = `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${backupError.message}. ID: ${userId}`;
                console.error("‚ùå", errorMessage);
                
                return { 
                    success: false, 
                    error: errorMessage,
                    userId: userId
                };
            }
        }
    }

    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    async testConnection() {
        const userId = this.tg?.initDataUnsafe?.user?.id || this.defaultParams.telegram_id;
        try {
            const response = await fetch(this.apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    telegram_id: userId.toString(),
                    date: this.defaultParams.date
                })
            });
            
            return response.ok;
        } catch (error) {
            console.error("‚ùå –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è:", error.message);
            return false;
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è curl-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    getCurlCommand(birthdate) {
        const userId = this.tg?.initDataUnsafe?.user?.id || this.defaultParams.telegram_id;
        return `curl -X POST ${this.apiUrl} -H "Content-Type: application/json" -d '{"telegram_id": "${userId}", "date": "${birthdate || this.defaultParams.date}"}'`;
    }
}
