export class TelegramService {
    constructor() {
        // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ URL
        this.isLocalDevelopment = window.location.hostname === 'localhost' || 
                                 window.location.hostname === '127.0.0.1';
        
        // –í —Ä–µ–∂–∏–º–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º NGINX –ø—Ä–æ–∫—Å–∏ –Ω–∞ –ø–æ—Ä—Ç—É 8081
        if (this.isLocalDevelopment) {
            this.baseUrl = 'http://localhost:8081/api';
        } else {
            // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π URL –∫ API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –±–µ–∑ –ø–æ—Ä—Ç–∞, —Ç–∞–∫ –∫–∞–∫ NGINX –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å –ø–æ—Ä—Ç–∞ 80
            const isHttps = window.location.protocol === 'https:';
            this.baseUrl = `${isHttps ? 'https' : 'http'}://217.144.186.159`;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        this.tg = window.Telegram?.WebApp;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ URL
        this.apiUrl = `${this.baseUrl}/webhook`;
        this.healthUrl = `${this.baseUrl}/health`;
        this.dbHealthUrl = `${this.baseUrl}/health/db`;
        
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π URL –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å NGINX - —Å –ø—Ä—è–º—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–æ—Ä—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.backupApiUrl = 'http://217.144.186.159:8080/webhook';
        
        this.timeouts = {
            health: 3000,
            data: 5000
        };
    }

    init() {
        if (!this.tg) {
            console.log("üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞");
            return;
        }

        this.tg.expand();
        this.tg.ready();
    }

    isTelegramWebApp() {
        return Boolean(
            this.tg?.initDataUnsafe?.user?.id &&
            this.tg?.initData &&
            this.tg?.platform !== 'unknown'
        );
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async sendUserData(birthdate) {
        let userId;
        let isBrowserMode = false;
        
        // –í —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ health API
        if (!this.isTelegramWebApp()) {
            isBrowserMode = true;
            
            try {
                const response = await fetch('http://217.144.186.159/health', {
                    method: 'GET',
                    headers: { 'Accept': 'application/json' }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    console.log("‚úÖ Health API –¥–æ—Å—Ç—É–ø–µ–Ω:", result);
                    return { 
                        success: true, 
                        browserMode: true,
                        data: result
                    };
                } else {
                    console.error(`‚ùå Health API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status}`);
                    return {
                        success: false,
                        browserMode: true,
                        message: "Health API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    };
                }
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ health API:", error.message);
                return {
                    success: false,
                    browserMode: true,
                    message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ health API"
                };
            }
        }
        
        // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram WebApp –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
        userId = this.tg?.initDataUnsafe?.user?.id?.toString();
        if (!userId) {
            console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            return {
                success: false,
                message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            };
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        const data = {
            telegram_id: userId,
            date: this.formatDateForDisplay(birthdate) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
        };
        
        return await this.sendDataWithRetry(data);
    }
    
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    async sendDataWithRetry(data) {
        // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π URL
        try {
            const response = await this.fetchWithTimeout(this.apiUrl, {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(data)
            }, this.timeouts.data);
            
            if (response.ok) {
                const result = await response.json();
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
                if (this.tg?.sendData) {
                    this.tg.sendData(JSON.stringify({
                        type: "success",
                        data: result
                    }));
                }
                
                return { success: true, data: result };
            } else {
                const errorText = await response.text();
                throw new Error(`HTTP error: ${response.status} - ${errorText}`);
            }
        } catch (error) {
            // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π URL –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
            if (this.apiUrl !== this.backupApiUrl) {
                try {
                    const backupResponse = await this.fetchWithTimeout(this.backupApiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    }, this.timeouts.data);
                    
                    if (backupResponse.ok) {
                        const result = await backupResponse.json();
                        return { success: true, data: result };
                    } else {
                        const errorText = await backupResponse.text();
                        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∞—Å–Ω–æ–≥–æ URL: ${backupResponse.status} - ${errorText}`);
                    }
                } catch (backupError) {
                }
            }
            
            // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
            return { 
                success: false, 
                error: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}`,
                userId: data.telegram_id
            };
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API –≤ —Ñ–æ–Ω–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
    async checkApiStatusInBackground() {
        setTimeout(async () => {
            try {
                const response = await this.fetchWithTimeout(this.healthUrl, { 
                    method: 'GET',
                    headers: { 'Accept': 'application/json' }
                }, this.timeouts.health);
                
                if (response.ok) {
                    const result = await response.json();
                }
            } catch (error) {
            }
        }, 100);
    }
    
    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ HEAD –∑–∞–ø—Ä–æ—Å
    async isApiReachable() {
        try {
            const response = await fetch(this.baseUrl, { 
                method: 'HEAD',
                cache: 'no-store',
                // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º no-cors —Ä–µ–∂–∏–º –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                timeout: 3000
            });
            
            return true;
        } catch (error) {
            return false;
        }
    }
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ health —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    async simpleHealthCheck() {
        try {
            const response = await this.fetchWithTimeout(this.healthUrl, { 
                method: 'GET',
                headers: { 'Accept': 'application/json' },
                cache: 'no-store'
            }, this.timeouts.health);
            
            if (response.ok) {
                try {
                    const data = await response.json();
                    return { 
                        status: data.status === "healthy" ? "healthy" : "error", 
                        message: `API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${data.status}`,
                        data
                    };
                } catch (parseError) {
                    return { 
                        status: "error", 
                        message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API" 
                    };
                }
            } else {
                return { 
                    status: "error", 
                    message: `–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status}` 
                };
            }
        } catch (error) {
            // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
            try {
                const backupResponse = await this.fetchWithTimeout(
                    this.healthUrl.replace('https:', 'http:'), 
                    { method: 'GET', headers: { 'Accept': 'application/json' } }, 
                    this.timeouts.health
                );
                
                if (backupResponse.ok) {
                    const backupData = await backupResponse.json();
                    return { 
                        status: backupData.status === "healthy" ? "healthy" : "error", 
                        message: `API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${backupData.status}`,
                        data: backupData,
                        backup: true
                    };
                } else {
                }
            } catch (backupError) {
            }
            
            return { 
                status: "unavailable", 
                message: "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º." 
            };
        }
    }

    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ª–æ–≥–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    async checkHealthWithLogs() {
        try {
            const startTime = Date.now();
            const response = await this.fetchWithTimeout(this.healthUrl, {
                method: 'GET',
                headers: { 'Accept': 'application/json' }
            }, 5000);
            const endTime = Date.now();
            
            if (response.ok) {
                const data = await response.json();
                const responseTime = endTime - startTime;
                return { 
                    status: "healthy", 
                    message: `API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (${responseTime}ms)`,
                    data
                };
            } else {
                const errorText = await response.text();
                return { 
                    status: "error", 
                    message: `–û—à–∏–±–∫–∞ API: HTTP ${response.status}`,
                    error: errorText
                };
            }
        } catch (error) {
            // –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π URL
            try {
                const backupResponse = await this.fetchWithTimeout(
                    this.healthUrl.replace('https:', 'http:'), 
                    { method: 'GET', headers: { 'Accept': 'application/json' } }, 
                    5000
                );
                
                if (backupResponse.ok) {
                    const backupData = await backupResponse.json();
                    return { 
                        status: "healthy", 
                        message: "API —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ HTTP",
                        data: backupData,
                        backup: true
                    };
                }
            } catch (backupError) {
            }
            
            return { 
                status: "unavailable", 
                message: "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º."
            };
        }
    }

    formatDateForApi(dateString) {
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
        if (/^\d{4}-\d{2}-\d{2}$/.test(dateString)) {
            return dateString;
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DD.MM.YYYY –≤ YYYY-MM-DD
        const parts = dateString.split('.');
        if (parts.length === 3) {
            return `${parts[2]}-${parts[1]}-${parts[0]}`;
        }
        
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
        return dateString;
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
    formatDateForDisplay(dateString) {
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
        if (/^\d{2}\.\d{2}\.\d{4}$/.test(dateString)) {
            return dateString;
        }
        
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ—ë
        const parts = dateString.split('-');
        if (parts.length === 3) {
            return `${parts[2]}.${parts[1]}.${parts[0]}`;
        }
        
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
        return dateString;
    }

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º —á–µ—Ä–µ–∑ AbortSignal –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    async fetchWithTimeout(url, options = {}, timeout = 8000) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), timeout);
        
        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal
            });
            clearTimeout(timeoutId);
            return response;
        } catch (error) {
            clearTimeout(timeoutId);
            if (error.name === 'AbortError') {
                throw new Error(`Request to ${url} timed out after ${timeout}ms`);
            }
            throw error;
        }
    }

    // –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
    async testConnection() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        const isReachable = await this.isApiReachable();
        if (!isReachable) {
            return false;
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º health API
        const result = await this.simpleHealthCheck();
        return result.status === "healthy";
    }
    
    getCurlCommand(birthdate) {
        const userId = this.tg?.initDataUnsafe?.user?.id;
        const formattedDate = this.formatDateForDisplay(birthdate);
        
        return `curl -X POST ${this.apiUrl} -H "Content-Type: application/json" -d '{"telegram_id": "${userId}", "date": "${formattedDate}"}'`;
    }
}
