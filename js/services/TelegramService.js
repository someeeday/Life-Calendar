export class TelegramService {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.apiUrl = 'https://217.144.186.159:8080/webhook/';
        this.backupApiUrl = 'http://217.144.186.159:8080/webhook/';
        this.healthUrl = 'https://217.144.186.159:8080/health';
        this.dbHealthUrl = 'https://217.144.186.159:8080/health/db';
        this.defaultParams = {
            telegram_id: "819793181",
            date: "20.08.2005"
        };
    }

    init() {
        if (!this.tg) {
            console.log("üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞");
            return;
        }

        this.tg.expand();
        this.tg.ready();

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (this.tg?.initDataUnsafe?.user) {
            console.log("üë§ User ID:", this.tg.initDataUnsafe.user.id);
            console.log("üì± Platform:", this.tg.platform);
            console.log("üìä Version:", this.tg.version);
        }
    }

    isTelegramWebApp() {
        return Boolean(
            this.tg?.initDataUnsafe?.user?.id &&
            this.tg?.initData &&
            this.tg?.platform !== 'unknown'
        );
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async sendUserData(birthdate) {
        let userId = this.defaultParams.telegram_id;
        let isBrowserMode = false;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!this.isTelegramWebApp()) {
            console.log("üåê –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ health API –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
            isBrowserMode = true;
            
            // –í —Ä–µ–∂–∏–º–µ –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º health API
            try {
                console.log("üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ health endpoint...");
                const healthResult = await this.checkHealthWithLogs();
                
                return { 
                    success: true, 
                    browserMode: true,
                    healthStatus: healthResult.status,
                    healthChecked: true,
                    message: healthResult.message
                };
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ health API:", error.message);
                return {
                    success: true, // –í—Å—ë —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –¥–ª—è UI
                    browserMode: true,
                    healthChecked: false,
                    healthStatus: "error",
                    message: "–†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞: –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–µ —É–¥–∞–ª–∞—Å—å"
                };
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
        userId = this.tg?.initDataUnsafe?.user?.id?.toString() || this.defaultParams.telegram_id;
        if (userId === this.defaultParams.telegram_id) {
            console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–∂–∏–¥–∞–Ω–∏—è–º API
        const data = {
            event_type: "birthday",
            payload: {
                telegram_id: userId,
                date: this.formatDateForApi(birthdate) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç API
            }
        };
        
        console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:", data);
        
        try {
            // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π URL (HTTPS)
            const response = await this.fetchWithTimeout(this.apiUrl, {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(data)
            }, 5000); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            if (response.ok) {
                const result = await response.json();
                console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", result);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram
                if (this.tg?.sendData) {
                    this.tg.sendData(JSON.stringify({
                        type: "success",
                        data: result
                    }));
                }
                
                return { success: true, data: result };
            } else {
                const errorText = await response.text();
                throw new Error(`HTTP error: ${response.status} - ${errorText}`);
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ HTTPS:", error.message);
            
            try {
                // –ï—Å–ª–∏ HTTPS –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º HTTP
                const backupResponse = await this.fetchWithTimeout(this.backupApiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                }, 5000); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                
                if (backupResponse.ok) {
                    const result = await backupResponse.json();
                    console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ HTTP:", result);
                    return { success: true, data: result };
                } else {
                    const errorText = await backupResponse.text();
                    throw new Error(`HTTP error: ${backupResponse.status} - ${errorText}`);
                }
            } catch (backupError) {
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                const errorMessage = `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${backupError.message}. ID: ${userId}`;
                console.error("‚ùå", errorMessage);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –æ—à–∏–±–∫—É
                this.testConnection().then(isApiAvailable => {
                    if (!isApiAvailable) {
                        console.error("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º");
                    }
                });
                
                return { 
                    success: false, 
                    error: errorMessage,
                    userId: userId
                };
            }
        }
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ health —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
    async checkHealthWithLogs() {
        console.log(`üå°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ health API –ø–æ –∞–¥—Ä–µ—Å—É: ${this.healthUrl}`);
        
        try {
            const startTime = Date.now();
            const response = await this.fetchWithTimeout(this.healthUrl, {
                method: 'GET',
                headers: { 'Accept': 'application/json' }
            }, 5000);
            const endTime = Date.now();
            
            if (response.ok) {
                const data = await response.json();
                const responseTime = endTime - startTime;
                console.log(`‚úÖ Health API –¥–æ—Å—Ç—É–ø–µ–Ω (${responseTime}ms): `, data);
                return { 
                    status: "healthy", 
                    message: `API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (${responseTime}ms)`,
                    data
                };
            } else {
                console.error(`‚ùå Health API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: HTTP ${response.status}`);
                const errorText = await response.text();
                console.error(`–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ${errorText}`);
                return { 
                    status: "error", 
                    message: `–û—à–∏–±–∫–∞ API: HTTP ${response.status}`,
                    error: errorText
                };
            }
        } catch (error) {
            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Health API: ${error.message}`);
            
            // –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π URL
            try {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π HTTP URL: ${this.healthUrl.replace('https:', 'http:')}`);
                const backupResponse = await this.fetchWithTimeout(
                    this.healthUrl.replace('https:', 'http:'), 
                    { method: 'GET', headers: { 'Accept': 'application/json' } }, 
                    5000
                );
                
                if (backupResponse.ok) {
                    const backupData = await backupResponse.json();
                    console.log("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π Health API –¥–æ—Å—Ç—É–ø–µ–Ω:", backupData);
                    return { 
                        status: "healthy", 
                        message: "API —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ HTTP",
                        data: backupData,
                        backup: true
                    };
                }
            } catch (backupError) {
                console.error(`‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–π URL —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${backupError.message}`);
            }
            
            return { 
                status: "unavailable", 
                message: "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º."
            };
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç API
    formatDateForApi(dateString) {
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
        if (/^\d{4}-\d{2}-\d{2}$/.test(dateString)) {
            return dateString;
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DD.MM.YYYY –≤ YYYY-MM-DD
        const parts = dateString.split('.');
        if (parts.length === 3) {
            return `${parts[2]}-${parts[1]}-${parts[0]}`;
        }
        
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
        return dateString;
    }

    // –ö–∞—Å—Ç–æ–º–Ω—ã–π fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    async fetchWithTimeout(url, options = {}, timeout = 8000) {
        const controller = new AbortController();
        const id = setTimeout(() => controller.abort(), timeout);
        
        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal,
            });
            clearTimeout(id);
            return response;
        } catch (error) {
            clearTimeout(id);
            throw error;
        }
    }

    // –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async testConnection() {
        console.log("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API...");
        const result = await this.checkHealthWithLogs();
        return result.status === "healthy";
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è curl-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π API
    getCurlCommand(birthdate) {
        const userId = this.tg?.initDataUnsafe?.user?.id || this.defaultParams.telegram_id;
        const formattedDate = this.formatDateForApi(birthdate || this.defaultParams.date);
        
        return `curl -X POST ${this.apiUrl} -H "Content-Type: application/json" -d '{"event_type": "birthday", "payload": {"telegram_id": "${userId}", "date": "${formattedDate}"}}'`;
    }
}
